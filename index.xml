<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Об DevOps и архитектуру</title><link>https://timurb.ru/</link><description>Recent content on Об DevOps и архитектуру</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Tue, 02 Nov 2021 22:26:12 +0300</lastBuildDate><atom:link href="https://timurb.ru/index.xml" rel="self" type="application/rss+xml"/><item><title>4 DORA Metrics</title><link>https://timurb.ru/kb/4-dora-metrics/</link><pubDate>Tue, 02 Nov 2021 22:26:12 +0300</pubDate><guid>https://timurb.ru/kb/4-dora-metrics/</guid><description>DORA в своем исследовании State Of Devops вывели метрики, которые показывают производительность организации:
Lead Time Deployment Frequency MTTR Change Failure Rate В двух словах, это важнейшие метрики из Lean, примененные к разработке софта, и они означают эффективность производственного процесса в компании. В упомянутом отчете показывается, что у тех компаний, кто показывает наилучшие бизнес-результаты эти метрики также высоки. Подробнее об этом говорится в вышеупомянутом отчете State Of Devops, а еще подробнее в книге Accelerate.</description></item><item><title>Operator Pattern</title><link>https://timurb.ru/kb/operator-pattern/</link><pubDate>Mon, 04 Oct 2021 12:45:57 +0300</pubDate><guid>https://timurb.ru/kb/operator-pattern/</guid><description>Паттерн Operator предназначен для создания инфраструктурных продуктов через декларативные описания.
К примеру, сам [[Kubernetes]] во многом является реализацией этого паттерна для своих объектов.
От контроллера отличается тем, что контроллер — это функциональный объект. Чаще всего Оператор строится при помощи контроллеров (по крайней мере в Kuberenetes).
От IaC отличается тем, что оператор не только описывает инфраструктуру декларативно, но и реализует жизненный цикл создания-управления-уничтожения этой инфраструктурой.
К примеру, Terraform описывает инфраструктуру как код, но применяет это изменение человек.</description></item><item><title>Kubernetes</title><link>https://timurb.ru/kb/kubernetes/</link><pubDate>Tue, 03 Aug 2021 15:05:22 +0300</pubDate><guid>https://timurb.ru/kb/kubernetes/</guid><description>[[Kubernetes]] &amp;ndash; это runtime для для написания распределенных инфраструктурных приложений с использованием [[Operator pattern]], плюс оркестратор контейнеров.
Ключевые составляющие:
Хранилище описаний объектов Модель нотификаций об изменениях как описаний, так и самих объектов Готовые простые инструменты для работы с хранилищем и событиями Мутноватый, но в целом неплохой stdlib для того, чтобы это было применимо к реальным вещам (запуск контейнеров, модель прав доступа и ограничений ресурсов и т.д.) Встроенный оркестратор контейнеров, за счет которого появляется возможность через эти механизмы достраивать самого себя Иными словами, это state-machine интегрированная с оркестратором.</description></item><item><title>Цитадель</title><link>https://timurb.ru/kb/citadel/</link><pubDate>Mon, 02 Aug 2021 13:09:46 +0300</pubDate><guid>https://timurb.ru/kb/citadel/</guid><description>Citadel — архитектурный паттерн проектирования наряду с паттернами &amp;ldquo;Монолит&amp;rdquo; и &amp;ldquo;Микросервисы&amp;rdquo;.
Состоит в выделении некоторой функциональности из монолита в виде &amp;ldquo;Outpost&amp;rdquo; и сохранении основного условно монолитного ядра.
Для того, чтобы принять решение оставлять ли некоторую функциональность в монолите, или же вынести ее в микросервис кажется можно применить [[6 причин делать микросервис]].
Хороший пример для выделения в Outpost — сервис аутентификации, на который обычно бывает высокая нагрузка, или сервис-представление для какого-нибудь счетчика, который выдает пользователю количество непрочитанных сообщений.</description></item><item><title>6 Причин Делать Микросервис</title><link>https://timurb.ru/kb/6-reasons-for-microservices/</link><pubDate>Mon, 02 Aug 2021 13:04:26 +0300</pubDate><guid>https://timurb.ru/kb/6-reasons-for-microservices/</guid><description>Микросервисы имеют и плюсы и минусы, на которых мы сейчас останавливаться не будем.
Существует 6 причин разделять компоненты на микросервисы, вместо разработки монолита:
Разная частота изменений (сервисы, которые меняются часто имеет смысл выделить в отдельный микросервис) Разный жизненный цикл (например, какой-то компонент требует особого вида тестирования или к нему особые требования у регуляторов) Разные требования к масштабированию (например, сильно нагружены чаще всего только 1-2 сервиса из десятков) Изоляция сбоев (если взорвется один сервис остальные продолжат работать, но при этом критичных компонентов не так много) Фасад к внешним зависимостям (устойчивость к смене их API, всякие AAA, и т.</description></item><item><title>API</title><link>https://timurb.ru/kb/api/</link><pubDate>Sun, 01 Aug 2021 23:39:54 +0300</pubDate><guid>https://timurb.ru/kb/api/</guid><description>Предоставление API можно рассматривать как способ подключения к деятельности других субъектов, или способ подключения к другому рынку.
Тот, кто предоставляет API к своему сервису также предоставляет и способ использования своего продукта в деятельности предпринимателей со стороны. По видимому это одна из причин, почему многие вендоров участвуют в создании открытых стандартов.
В этом смысле конструирование API наиболее удобных для каких-то конкретных пользователей можно рассматривать как упаковку имеющегося продукта под новые рынки. В этом же контексте по видимому можно применять те же способы разработки продуктов, которые применяются и для продуктов физического мира (такие как Lean Startup и т.</description></item><item><title>Открытые стандарты</title><link>https://timurb.ru/kb/open-standards/</link><pubDate>Sun, 01 Aug 2021 22:56:25 +0300</pubDate><guid>https://timurb.ru/kb/open-standards/</guid><description>[[Открытые стандарты]] — это способ формирования вендорами рынка, на котором они смогут строить свои решения и играть по понятным правилам.
Через создание спецификации некоторого API вендоры оформляют и стабилизируют рынок, чтобы появилась возможность выпускать под него свои продукты.
Примеры (возможно не все из них корректные):
[[Open Container Initiative]]: https://opencontainers.org/ Open Application Model: https://oam.dev/ Open Service Broker API: https://www.openservicebrokerapi.org/ Open SLO: https://openslo.com/ Open Policy Agent: https://www.openpolicyagent.org/ Open API: https://www.openapis.org/ Open Service Mesh: https://openservicemesh.</description></item><item><title>Open Container Initiative</title><link>https://timurb.ru/kb/open-container-initiative/</link><pubDate>Sun, 01 Aug 2021 22:18:30 +0300</pubDate><guid>https://timurb.ru/kb/open-container-initiative/</guid><description>[[Open Container Initiative]] — это рабочая группа, включающая в себя крупных вендоров, которая разрабатывает [[открытые стандарты]] для запуска контейнеров.
В стандарт входят три спецификации:
Спецификация образов контейнеров (https://github.com/opencontainers/image-spec) Спецификация передачи образов (https://github.com/opencontainers/distribution-spec) Спецификация рантайма для контейнеров (https://github.com/opencontainers/runtime-spec) Это позволяет разным вендорам делать собственные реализации контейнеризации оставаясь при этом совместимыми с пользовательским тулчейном &amp;ndash; инструментами разработки, сборки, оркестраторами и т.д.
Примеры реализации этих стандартов (список не исчерпывающий):
https://github.com/opencontainers/image-spec/blob/main/implementations.md https://github.</description></item><item><title>Индикаторы и метрики Devops</title><link>https://timurb.ru/kb/system-metrics-devops/</link><pubDate>Sun, 01 Aug 2021 11:57:32 +0300</pubDate><guid>https://timurb.ru/kb/system-metrics-devops/</guid><description>Большая ошибка многих рассуждающих в контексте DevOps о &amp;ldquo;снижении TTM&amp;rdquo; и необходимости &amp;ldquo;релизиться чаще&amp;rdquo; состоит в том, что они рассматривают частоту релизов и время &amp;ldquo;от коммита до продакшна&amp;rdquo; как технический показатель. В лучшем случае рассматривают с учетом простоев в цепочке поставке. Они считают, что если автоматизировать все, они смогут релизиться 100 раз в день и догонят и перегонят Google (конечно, для этого автоматизировать нужно &amp;ldquo;не просто так&amp;rdquo;, а &amp;ldquo;по-умному&amp;rdquo;).
На деле же автоматизация на этот показатель влияет достаточно мало (больше влияет отсутствие автоматизации) и в современном мире эти показатели в гораздо большей степени определяют другие сущности в организации — социотехническая архитектура приложения (зависимости между командами разработки и их автономность) и планирование продуктового инкремента.</description></item><item><title>Атрибуты Качества</title><link>https://timurb.ru/kb/quality-attributes/</link><pubDate>Thu, 29 Jul 2021 13:31:52 +0300</pubDate><guid>https://timurb.ru/kb/quality-attributes/</guid><description>Атрибуты качества уточняют требования к системе —- как функциональные, так и не функциональные. Они не могут обсуждаться отдельно без требований.
Атрибуты качества должны быть максимально конкретными и точными, с минимумом возможных интерпретаций. В идеале по ним должно быть возможно построить Quality Gate.
Атрибуты качества часто несут в себе некоторые затраты на их реализацию. Через эти затраты можно обсуждать какие из атрибутов качества важны для стейкхолдеров, а какими можно поступиться.
Примеры атрибутов качества см.</description></item><item><title>Architect Elevator</title><link>https://timurb.ru/kb/architect-elevator/</link><pubDate>Tue, 27 Jul 2021 21:53:21 +0300</pubDate><guid>https://timurb.ru/kb/architect-elevator/</guid><description>&lt;p>Architect Elevator &amp;ndash; принцип, который утверждает, что Архитектура — это способ &lt;em>коммуникации&lt;/em> между уровнями в организации.&lt;/p>
&lt;p>С учетом того, что современные организации движутся в сторону Software defined processes, коммуникация эта должна затрагивать как организационные, так и технические взаимодействия.&lt;/p></description></item><item><title/><link>https://timurb.ru/about/</link><pubDate>Wed, 21 Jul 2021 19:12:34 +0300</pubDate><guid>https://timurb.ru/about/</guid><description>Об авторе Меня зовут Тимур Батыршин. Я развиваю методологию DevOps и связанные с этим архитектурные и организационные подходы.
Эксперт в компании Экспресс 42, член программного комитета конференции DevOpsConf, преподаватель в OTUS.
Это не блог, а скорее база знаний и глоссарий &amp;ndash; статьи могут обновляться, при этом оставаться по одному и тому же адресу.
Все тексты моего авторства, если не указано иного. При перепечатке обязательна ссылка.
Тексты могут и будут дорабатываться со временем, это может происходить прямо внутри статей, не отдельными страницами.</description></item></channel></rss>