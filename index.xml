<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Об DevOps и архитектуру</title><link>https://timurb.ru/</link><description>Recent content on Об DevOps и архитектуру</description><generator>Hugo</generator><language>ru-ru</language><lastBuildDate>Mon, 30 Dec 2024 22:06:41 +0300</lastBuildDate><atom:link href="https://timurb.ru/index.xml" rel="self" type="application/rss+xml"/><item><title>Об IT-компетенции</title><link>https://timurb.ru/kb/sfia-vs-icd/</link><pubDate>Mon, 30 Dec 2024 22:06:41 +0300</pubDate><guid>https://timurb.ru/kb/sfia-vs-icd/</guid><description>&lt;p>Последний год или чуть больше достаточно большая часть моих задач на работе &amp;ndash; организация пула devops-инженеров:&lt;/p>
&lt;ul>
&lt;li>построение найма (в т.ч. делегирование найма самим ребятам) и работы HR-специалистов&lt;/li>
&lt;li>уточнение критериев к грейдам&lt;/li>
&lt;li>описание типовых задач, которые команды devops закрывают на проектах&lt;/li>
&lt;li>классификация разношерстных проектных запросов на нашу грейдовую сетку (чтобы проекты перестали запрашивать лидов на &amp;ldquo;развертывание софта по инструкции&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>В ближайшее время доработаем с ребятами типовые пути развития и набор курсов/учебников, которые помогут по ним двигаться, и можно будет заниматься развитием вовне (например, построением технологического радара согласованного со всем вышеперечисленным).&lt;/p></description></item><item><title>Об платформенных инженеров</title><link>https://timurb.ru/kb/platform-engineer/</link><pubDate>Wed, 06 Nov 2024 19:01:23 +0300</pubDate><guid>https://timurb.ru/kb/platform-engineer/</guid><description>&lt;p>Некоторое время назад я озвучивал свое мнение о том, что такое &amp;ldquo;devops-инженер&amp;rdquo; (спойлер: определенный вид разработчика), однако на днях было указание на термин &amp;ldquo;платформенный инженер&amp;rdquo; (спасибо, Антон!).&lt;/p>
&lt;p>Несмотря на то, что термин &amp;ldquo;platform engineer&amp;rdquo; постепенно распространяется, я не считаю его верным. Но вместе с тем он может оказаться полезным.&lt;/p>
&lt;p>Platform Engineering это домен проектирования, предметная область, такая же как, например &amp;ldquo;трансграничные переводы&amp;rdquo; или &amp;ldquo;автоматизация склада&amp;rdquo;, или шире &amp;ldquo;финтех&amp;rdquo; и &amp;ldquo;ретейл&amp;rdquo;.&lt;/p></description></item><item><title>Об менеджерское и инженерное рассмотрение процесса разработки</title><link>https://timurb.ru/kb/devops-role-change/</link><pubDate>Sat, 11 May 2024 22:42:00 +0300</pubDate><guid>https://timurb.ru/kb/devops-role-change/</guid><description>&lt;p>Если продолжать обсуждать переход от документо-ориентированных (document-centric) процессов управления к программно-задаваемым (software-defined) (предыдущие посты: &lt;a href="https://t.me/devops_architecture/42">раз&lt;/a>, &lt;a href="https://t.me/devops_architecture/44">два&lt;/a>, &lt;a href="https://t.me/devops_architecture/45">три&lt;/a>), легко упустить одно обстоятельство, которое одновременно наиболее ярко покажет совершившуюся революцию (и возможно окажется, что это революция консервативная).&lt;/p>
&lt;p>А именно, ключевой фигурой, которая задает и контролирует некий процесс работы (например, процесс превращения фичи из замысла в код работающий на продакшне — через разработку, тестирование и другие стадии процесса разработки) перестал быть менеджер, как это было в документо-ориентированных процессах. Для программно-задаваемых процессов этой ключевой фигурой снова стал инженер, как это было до выделения менеджмента как отдельной дисциплины.&lt;/p></description></item><item><title>Куда идет DevOps</title><link>https://timurb.ru/kb/kuda-idet-devops/</link><pubDate>Thu, 04 Apr 2024 10:35:33 +0300</pubDate><guid>https://timurb.ru/kb/kuda-idet-devops/</guid><description>&lt;p>Друзья из Флант недавно попросили меня поделиться видением того, куда движется DevOps и индустрия, и что с ней станет лет через 10.
После того как они опубликовали &lt;a href="https://habr.com/ru/companies/flant/articles/800959/">свою статью&lt;/a> я понял, что хочу немного развернуть свои ответы.&lt;/p>
&lt;h2 id="kubernetes">Kubernetes&lt;/h2>
&lt;ul>
&lt;li>Будет ли он ещё популярен через 5-10 лет?&lt;/li>
&lt;li>Какие технологии могут прийти ему на смену?&lt;/li>
&lt;li>Какие вызовы ему придётся решать?&lt;/li>
&lt;/ul>
&lt;p>Kubernetes никуда не исчезнет, он стал таким же стандартом, каким стал Docker для упаковки и передачи приложений.
Пока что это стандарт на описание и композицию приложений и инфраструктуры. Но он сейчас достаточно быстро становится базой для стандартов, например, для комплаенса или интеграции с телеметрией, одним словом при помощи Kubernetes API уже значимое время описывают объекты, которые не всегда связаны с инфраструктурой напрямую:&lt;/p></description></item><item><title>Об гиперпространственные тоннели между деятельностными мирами</title><link>https://timurb.ru/kb/hyperspace/</link><pubDate>Fri, 15 Dec 2023 00:18:33 +0300</pubDate><guid>https://timurb.ru/kb/hyperspace/</guid><description>&lt;p>Меня очень вдохновляет язык моделирования &lt;a href="https://www.cfin.ru/itm/EA_ArchiMate.shtml">Archimate&lt;/a> при всех его недостатках. Я не особенно задумывался почему — на нем удобно отображать связи и взаимодействие между людьми, процессами, приложениями, технологиями, но кажется этого недостаточно чтобы служить вдохновением.
Сегодня я понял в чем дело: за счет его метамодели у нас в рассуждениях появляется интерфейс, связывающий между собой понятия из самых разных областей.&lt;/p>
&lt;p>Метамодель Archimate очень простая, это формула “cубъект — выполняет действия — с объектом”, и в дополнение представление ее же во внешний мир в виде сервисов и интерфейсов.&lt;/p></description></item><item><title>Об разницу между Waterfall и Agile</title><link>https://timurb.ru/kb/waterfall-agile/</link><pubDate>Sun, 01 Oct 2023 08:20:24 +0300</pubDate><guid>https://timurb.ru/kb/waterfall-agile/</guid><description>&lt;p>(из неопубликованных архивов)&lt;/p>
&lt;p>Некоторое время назад нашел простое и потрясающее объяснение того, когда нужно выбирать waterfall, когда scrum, а когда еще что-то другое.&lt;/p>
&lt;p>Цитата (отсюда &lt;a href="https://sebokwiki.org/wiki/System_Lifecycle_Models)">https://sebokwiki.org/wiki/System_Lifecycle_Models)&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>There are a large number of potential life cycle process models. They fall into three major categories:&lt;/p>
&lt;p>  1. primarily pre-specified and sequential processes (e.g. the single-step waterfall model)&lt;/p>
&lt;p>  2. primarily evolutionary and concurrent processes (e.g. lean development, the agile unified process, and various forms of the vee and spiral models)&lt;/p></description></item><item><title>Ситуационная инженерия метода</title><link>https://timurb.ru/kb/situational-method-engineering/</link><pubDate>Sun, 28 May 2023 08:42:07 +0300</pubDate><guid>https://timurb.ru/kb/situational-method-engineering/</guid><description>&lt;p>При старте нового проекта (или авральном подключении к существующему) руководителю нужно выполнить большое количество шагов планирования и коммуникации, чтобы работа двинулась в правильном направлении. Это можно сделать или в ватерфольном режиме, написав устав проекта, согласовав со всеми и т.д. до непосредственного старта проекта, или в быстром адаптивном режиме, и для этого важно одновременно решать вопросы, которые нужны здесь и сейчас, и при этом двигать организацию проект в нужном направлении.&lt;/p>
&lt;p>Такое умение можно либо наработать на опыте поучаствовав в десятке-другом разных проектов разного характера, либо на базе некоторой модели, которая должна быть быстрой и простой в применении, и при этом с возможностью масштабироваться до охвата всех аспектов работы команды (содержание работы, процессы, критерии качества и т.д).&lt;/p></description></item><item><title>Об Модифицирующие Команды</title><link>https://timurb.ru/kb/ob-enabling-team/</link><pubDate>Sun, 19 Mar 2023 18:01:34 +0300</pubDate><guid>https://timurb.ru/kb/ob-enabling-team/</guid><description>&lt;p>Из всех тем, рассматриваемых в Team Topologies наиболее непонятная тема — это Enabling team, “модифицирующая” или “преобразующая” команда. Я буду использовать слово Модифицирующая Команда, потому что такой же перевод используется в &lt;a href="https://platen.dev">Platen&lt;/a>.&lt;/p>
&lt;p>В самой книге про нее говорится многих общих слов типа:&lt;/p>
&lt;blockquote>
&lt;p>Enabling teams have a strongly collaborative nature; they thrive to understand the problems and shortcomings of stream-aligned teams in order to provide effective guidance&lt;/p>
&lt;/blockquote>
&lt;p>или&lt;/p>
&lt;blockquote>
&lt;p>The mission of enabling teams is to help stream-aligned teams acquire missing capabilities, usually around a specific technical or product management area&lt;/p></description></item><item><title>Об формальные и неформальные нотации</title><link>https://timurb.ru/kb/formal-informal-notations/</link><pubDate>Wed, 01 Feb 2023 22:43:40 +0300</pubDate><guid>https://timurb.ru/kb/formal-informal-notations/</guid><description>&lt;p>Если сравнивать &amp;ldquo;просто стикеры&amp;rdquo; в миро и Archimate, то Archimate удобнее тем, что мы в нем получаем &amp;ldquo;встроенную&amp;rdquo; валидацию типов, которую в случае стикеров приходится выполнять более явно.&lt;/p>
&lt;p>Скорее всего это применимо и для других формальных языков описаний (BPMN, UML и т.д.) в сравнении со &amp;ldquo;свободными&amp;rdquo; рассуждениями.&lt;/p>
&lt;p>С другой стороны, если понимания типов у человека нет все нотации мгновенно становятся бессмысленными.
А для коммуникации нужны именно типы, пространство понятий, а не нотация.&lt;/p></description></item><item><title>Платформенный подход и трансакционные издержки</title><link>https://timurb.ru/kb/platforms-and-transactions/</link><pubDate>Fri, 06 Jan 2023 13:02:17 +0300</pubDate><guid>https://timurb.ru/kb/platforms-and-transactions/</guid><description>&lt;p>В начале 20 века английский экономист Рональд Коуз изучал причину появления фирм на свободном рынке, и в своей статье &lt;a href="https://en.wikipedia.org/wiki/The_Nature_of_the_Firm">Природа фирм&lt;/a> он пришел к следующему:&lt;/p>
&lt;ul>
&lt;li>Трансакционные издержки (расходы на поиск и взаимодействие контрагентов и их контрактацию) внутри фирмы ниже, чем трансакционные издержки на рынке, и поэтому найм может оказаться дешевле чем аутсорсинг. Контракт с сотрудником обслуживать дешевле, чем контракт с внешней организацией (даже если это рамочный контракт).
&lt;ul>
&lt;li>В противном случая аутсорсинг дешевле, т.к. внешний подрядчик оптимизирует работу своей компании для того, чтобы стать более конкурентоспособным, и поэтому будет более эффективным чем внутренний сотрудник.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Одновременно с этим при росте компании растут издержки на управление самой компанией, увеличивается количество ошибок управления и т.д.&lt;/li>
&lt;li>Размер компании определяется оптимумом между расходами на трансакционные издержки и расходами на издержки управления.&lt;/li>
&lt;/ul>
&lt;p>Подробнее предлагаю прочитать в &lt;a href="https://en.wikipedia.org/wiki/The_Nature_of_the_Firm">википедии&lt;/a>, либо в первоисточнике — я мог недостаточно четко пересказать основные мысли оттуда.&lt;/p></description></item><item><title>5 бизнес-процессов в разработке</title><link>https://timurb.ru/kb/5-devops-processes/</link><pubDate>Mon, 02 Jan 2023 21:20:16 +0300</pubDate><guid>https://timurb.ru/kb/5-devops-processes/</guid><description>&lt;p>Меня периодически спрашивают каким образом строить инфраструктуру для небольших проектов, когда в команде еще нет компетенций админа/девопс-инженера ни у руководителя или программистов, ни в в виде выделенного человека.
Что при этом выбрать — выделенные сервера, облако или Kubernetes? Я сейчас не буду делать какие-то технологические рекомендации, но опишу на что нужно обратить внимание организационно, чтобы можно было сделать такой выбор.&lt;/p>
&lt;p>При планировании развертывания любого приложения для продакшна важно всегда в том или ином виде продумывать как минимум следующие 5 бизнес-процессов / Value stream:&lt;/p></description></item><item><title>Методология, дисциплины, практики</title><link>https://timurb.ru/kb/methodology-practices/</link><pubDate>Wed, 28 Dec 2022 17:21:15 +0300</pubDate><guid>https://timurb.ru/kb/methodology-practices/</guid><description>&lt;p>Существует мнение, что тяжеловесные подходы проектирования (ITIL, TOGAF, ГОСТ34 и т.д.) несовместимы с быстрыми частыми релизами и изменениями. А следовательно, зачем их изучать? Это верно только отчасти.&lt;/p>
&lt;p>Во-первых вспомним всем известную методологическую максиму, которая упрощенно звучит как: &lt;em>&amp;ldquo;практика = дисциплина + технология&amp;rdquo;&lt;/em>. И далее эта самая &lt;em>практика&lt;/em> адаптируется под вполне конкретный контекст организации.&lt;/p>
&lt;p>&lt;em>Дисциплина&lt;/em> описывает мотивацию, взаимоотношения с окружающим миром, онтологию и принципы. К примеру, CI/CD предназначено для ускорения поставки разрабатываемого софта в продакшн, состоит из последовательной цепочки преобразований, которую проходит описание фичи до продакшна (в процессе превращаясь в код, затем в некий набор артефактов), подразумевает активное участие команды в процессах этой цепочки, и наконец можно говорить о принципах Shift Left и Fail Fast как примере более частных описаний.&lt;/p></description></item><item><title>Релизы и деплои</title><link>https://timurb.ru/kb/release-deploy/</link><pubDate>Mon, 12 Dec 2022 09:54:04 +0300</pubDate><guid>https://timurb.ru/kb/release-deploy/</guid><description>&lt;p>Периодически поднимается тема того, чем отличается deploy от release, и на это есть элегантный ответ в недавно вышедшей &lt;a href="https://pubs.opengroup.org/it4it/3.0/standard/_book-html.html">новой версии&lt;/a> стандарта &lt;a href="https://pubs.opengroup.org/it4it/">IT4IT&lt;/a> от &lt;a href="https://www.opengroup.org/">The Open Group&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://pubs.opengroup.org/it4it/3.0/standard/VSs_IT4IT-Value-Streams.html#VS_Deploy">Deploy&lt;/a> &amp;ndash; это собственно инсталляция новой версии продукта на продакшн (сюда же включают и удаление старых версий с продакшна). В этот процесс входят и все стратегии деплоя &amp;ndash; в том числе canary deploy, раскатка на какую-то небольшую часть аудитории, или деплой функциональности вообще прикрытой через feature flags и недоступной никому.&lt;/p></description></item><item><title>Исследование DORA и его проблемы</title><link>https://timurb.ru/kb/dora-research-review/</link><pubDate>Sun, 11 Dec 2022 10:53:34 +0300</pubDate><guid>https://timurb.ru/kb/dora-research-review/</guid><description>&lt;p>Кажется, спустя полтора года после прочтения книги Accelerate наконец удалось кратко и компактно сформулировать в чем проблема с &lt;a href="https://cloud.google.com/devops/state-of-devops/">отчетом State Of Devops&lt;/a>.&lt;/p>
&lt;p>Проблема в том, что в книге и отчете выпячивается та несомненно большая сложная часть работы по статистическим предсказаниям, которая однако по факту никому не нужна, и которая не имеет смысла.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>DORA статистически показали, что использование CI/CD приводит (&amp;ldquo;предсказывает&amp;rdquo;) к сокращению Lead Time, увеличению частоты поставки и снижению количества ошибок при развертывании.
На деле же это и есть основная функция CI/CD - он строится как раз для того, чтобы именно это и происходило.
Если ваш процесс CI/CD не приводит к ускорению поставки он не выполняет свою основную функцию, и скорее всего вы что-то делаете не так, и это можно сказать без исследований.
Ждем горячих заголовков &amp;ldquo;Доказано научно: передвигаться на велосипеде быстрее чем пешком&amp;rdquo;.&lt;/p></description></item><item><title>Путь развития разработчика в Infrastructure as Code</title><link>https://timurb.ru/kb/roadmaps-for-iac/</link><pubDate>Thu, 06 Oct 2022 12:54:19 +0300</pubDate><guid>https://timurb.ru/kb/roadmaps-for-iac/</guid><description>&lt;p>Недавно вышли новые роадмапы профессионального развития на &lt;a href="https://roadmap.sh/">https://roadmap.sh/&lt;/a> и они на мой взгляд очень хорошо помогают прояснить &lt;a href="./kb/iac-engineering">мой предыдущий пост&lt;/a> про то, что подход Infrastructure as Code — это особая форма разработки. Я не уверен, что согласен с &lt;em>названиями&lt;/em> роадмапов, но разделение на роадмапы мне кажется очень хорошо сделанным:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://roadmap.sh/software-architect">Software Architect&lt;/a> — список навыков указывают, что основные задачи это построение систем, состоящих из множества отдельно разрабатываемых компонентов (и интеграция этих компонентов между собой), коммуникация с разработчиками, другими архитекторами и руководством компании, и организация проекта. Одним словом, чтобы множество команд разработки и программные сервисы которые они разрабатывают интегрировались друг с другом и при этом решали бизнес-задачи. Нужны ли эти практики в подходе Infrastructure as Code? Не уверен, скорее всего если выходишь на такой уровень в организации тебе &lt;em>уже&lt;/em> не нужен IaC, но вместе с тем практически все эти темы в той или иной мере затрагиваются если ты занимаешься методологией &lt;a href="./kb/devops-evolution">DevOps&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://roadmap.sh/software-design-architecture">Software Design and Architecture&lt;/a> (напомню, что &amp;ldquo;design&amp;rdquo; переводится как &amp;ldquo;проектирование&amp;rdquo;) — список навыков указывает, что основные задачи это структурирование программного кода, разбиение на модули и интеграция между ними. Одним словом, все то, что нужно для того, чтобы код был не лапшой, а был поддерживаемым, тестируемым, изменяемым, надежным и т.п. Нужны ли эти практики в подходе Infrastructure as Code? Несомненно. Если размер инфраструктурного кода десятки тысяч строк, применение всех этих практик и концептов поможет справиться со сложностью и в относительно более декларативных языках — она в них с ростом кодовой базы растет медленнее чем в императивных, но все же растет. Отдельные принципы скорее всего неприменимым, но не столько неприменимы сами по себе, сколько по причине относительно более простой и относительно маленькой кодовой базы в случае инфраструктуры, и относительно стабильного пространства понятий которые мы при помощи IaC описываем.&lt;/li>
&lt;li>&lt;a href="https://roadmap.sh/backend">Backend Developer&lt;/a> — здесь говорится об инструментах и концепциях применяемых собственно в процессе разработки. Что-то из этого если находимся в контексте инфраструктуры мы знаем и так, что-то становится применимо сразу же как-только мы начинаем заниматься SRE, а не только писать код. В целом кажется применимым не столько к IaC, сколько к SRE.&lt;/li>
&lt;/ul>
&lt;p>Напомню свой тезис, который прозвучал в начале: практика &lt;a href="iac-engineering">Infrastructure as Code&lt;/a> является не чем иным как программированием в &amp;ldquo;особой&amp;rdquo; доменной области на &amp;ldquo;особом&amp;rdquo; языке. Примерно так же как современное фронтенд-программирование имеет довольно мало общего с тем программированием на языке Паскаль, которое мы изучали в школе. Основные отличия находятся в решаемой проблематике и в конкретных языках программирования, которые применяются для решения задач.&lt;/p></description></item><item><title>Инженерия и подход Infrastructure as Code</title><link>https://timurb.ru/kb/iac-engineering/</link><pubDate>Sun, 25 Sep 2022 22:30:56 +0300</pubDate><guid>https://timurb.ru/kb/iac-engineering/</guid><description>&lt;p>Подход &amp;ldquo;Инфраструктура как код&amp;rdquo; является ничем иным как особой формой разработки/программирования, и к этой форме разработки применимы большинство практик, принципов и паттернов, используемых в &amp;ldquo;классическом программировании&amp;rdquo;.&lt;/p>
&lt;p>В статье &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> мимоходом отлично прояснен этот вопрос через определение того, что такое &amp;ldquo;инженерия&amp;rdquo;:&lt;/p>
&lt;blockquote>
&lt;p>Ideally the construction design phase results first into an ontological model of the object system, i.e. a white-box model that is completely independent of its implementation. Gradually this ontological model is transformed into more detailed (and more implementation dependent) whitebox models, the last one being the implementation model. This process is called implementation design or just engineering. If the object system is a software application, then the implementation model would be the source code in some programming language. The act of implementing consists of assigning appropriate technological means to the implementation model, e.g. running the source code on an appropriate platform.&lt;/p></description></item><item><title>Об outsourcing</title><link>https://timurb.ru/kb/outsourcing/</link><pubDate>Wed, 31 Aug 2022 10:48:46 +0300</pubDate><guid>https://timurb.ru/kb/outsourcing/</guid><description>&lt;p>Интересным, но не совсем понятным в &lt;a href="./kb/lifecycle-development/">современной парадигме разработки&lt;/a> становится место аутсорсинга в любом виде.&lt;/p>
&lt;p>В &amp;ldquo;классическом&amp;rdquo; аутсорсинге некая внешняя организация выполняет некие работы для создания системы, которая нужна заказчику, передает ее заказчику, и на этом жизнь проекта заканчивается. Иногда бывает постпроект в виде &amp;ldquo;поддержки&amp;rdquo;, но это чаще всего совсем другой режим работы.
Иными словами, команда разработки создает систему, передает ее команде эксплуатации (которая как-то там ее поддерживает) и опционально подключается команда сопровождения для мелких багфиксов.&lt;/p></description></item><item><title>Обеспечение жизненного цикла компонентов обеспечивающих жизненный цикл</title><link>https://timurb.ru/kb/lifecycle-development/</link><pubDate>Wed, 10 Aug 2022 23:03:02 +0300</pubDate><guid>https://timurb.ru/kb/lifecycle-development/</guid><description>&lt;p>Если ожидается, что наша система будет постоянно меняться, процесс эксплуатации становится важен настолько же, насколько важны и все остальные практики жизненного цикла &amp;ndash; разработка, &lt;a href="./kb/testing-the-iac">тестирование&lt;/a>, сборка, интеграция и т.д.
Более того, все эти практики жизненного цикла становятся практически настолько же важны, как и сами функции приложения &amp;ndash; те, которые предоставляются внешним пользователям.&lt;/p>
&lt;p>Компоненты, обеспечивающие практики жизненного цикла (т.е. песочницы для разработчиков, автотесты, системы сборки, пайплайны CI/CD, система логирования и т.д.) становятся настолько же важны как и сами компоненты приложения — они теперь проектируются, разрабатываются, тестируются, эксплуатируются точно так же. Для них самих прорабатывается обеспечение жизненого цикла и интегрируются инструменты его автоматизации.
Этим в частности и отличается подход Infrastructure as Code от Infrastructure as Scripts. А именно, тем, что теперь инфракод (в т.ч. CI/CD, мониторинг и т.п.) это &lt;strong>точно такой же программный компонент самого приложения&lt;/strong> как и, например, его web-фронтенд. Если же говорить про больший масштаб &amp;ndash; инфра-компоненты будут точно такими же компонентами многокомпонентного приложения, примерно как “сервис нотификаций” или “сервис некоей бизнес-отчетности”.&lt;/p></description></item><item><title>Об принятие инженерных решений</title><link>https://timurb.ru/kb/decision-making/</link><pubDate>Sat, 06 Aug 2022 00:54:59 +0300</pubDate><guid>https://timurb.ru/kb/decision-making/</guid><description>&lt;p>Каждый раз когда мы говорим о реализации некоей системы (например, инфраструктурной платформы) одной из наших ключевых задач (возможно, важнейшей) будет принятие множества решений — как важных, так и не очень (нас интересуют важные). Эти решения самые разнообразные — решение о том, кто будет пользователями нашей системы, а кого оставляем за бортом, каким образом система будет устроена технологически, как мы ее будем реализовать и кто будет в нашей команде, и самое главное — будем ли мы эту систему реализовывать вообще, или будем жить дальше по старинке.&lt;/p></description></item><item><title>Бирюзовый монолит</title><link>https://timurb.ru/kb/teal-monolith/</link><pubDate>Tue, 05 Jul 2022 22:23:46 +0300</pubDate><guid>https://timurb.ru/kb/teal-monolith/</guid><description>&lt;p>При разговоре о &amp;ldquo;бирюзовых организациях&amp;rdquo; или &amp;ldquo;аджайле&amp;rdquo; часто считают, что это организации плоские и без особой структуры. Мол хорошо мотивированные высококлассные специалисты могут сами организоваться наиболее эффективным образом.&lt;/p>
&lt;p>Но давайте вспомним про закон Конвея — &amp;ldquo;Организации проектируют системы, которые копируют структуру коммуникаций в этой организации&amp;rdquo;.
Плоская структура без иерархии (либо развитой параллельной управляющей структуры в виде например HR или архитектурной функции) будет означать, что эта компания разрабатывает монолит. Свободное перемещение между командами и изменение их конфигурации и зон ответственности — то, что этот монолит будет сильносвязанным. Это действительно светлое будущее, или же мы движемся в будущее микросервисов?&lt;/p></description></item><item><title>Вовлеченность и Agile</title><link>https://timurb.ru/kb/agile-engagement/</link><pubDate>Mon, 04 Apr 2022 11:44:44 +0300</pubDate><guid>https://timurb.ru/kb/agile-engagement/</guid><description>&lt;p>(из архива 2020)&lt;/p>
&lt;p>Agile часто продают как способ повысить вовлеченность команды в процесс.
На деле все наоборот — &lt;em>сначала&lt;/em> вовлеченность, &lt;em>потом&lt;/em> Agile.&lt;/p>
&lt;p>Возможно многие &amp;ldquo;серебряные пули&amp;rdquo; не работают именно потому что пытаются при помощи их решить то, что они &lt;em>требуют&lt;/em>.&lt;/p>
&lt;p>К примеру, DevOps пытаются применять для того, чтобы с его помощью улучшить скорость поставки фич в продакшн, хотя на деле наоборот - улучшение такой скорости (помимо всего прочего) приводит к DevOps.&lt;/p></description></item><item><title>Эволюция DevOps</title><link>https://timurb.ru/kb/devops-evolution/</link><pubDate>Thu, 24 Mar 2022 19:21:56 +0300</pubDate><guid>https://timurb.ru/kb/devops-evolution/</guid><description>&lt;p>15 лет назад DevOps начинался в попытке &amp;ldquo;подружить&amp;rdquo; разработку и эксплутацию &amp;ndash; через культуру, обмен знаниями и совместную работу.
Затем быстро развернулся в сторону ускорения поставки изменений из разработки в продакшн (активность &lt;a href="https://www.atlassian.com/continuous-delivery/principles/value-stream-mapping">Lean Value Stream Mapping&lt;/a>),
продолжился в понимание того, что программисты создают не просто код в репозитории (и даже не протестированный код в репозитории),
а работающее приложение в продакшне (практики Observability и &lt;a href="https://sre.google/sre-book/table-of-contents/">SRE&lt;/a>).
И последние несколько лет DevOps перешел к рассмотрению взаимодействие команд на масштабе (фреймворк &lt;a href="https://teamtopologies.com/">Team Topologies&lt;/a>).&lt;/p></description></item><item><title>Тестирование в IaC</title><link>https://timurb.ru/kb/testing-the-iac/</link><pubDate>Wed, 15 Dec 2021 16:54:02 +0300</pubDate><guid>https://timurb.ru/kb/testing-the-iac/</guid><description>&lt;p>Подход &amp;ldquo;Инфраструктура как Код&amp;rdquo; (IaC) противопоставляется подходу &amp;ldquo;Infrastructure as Scripts&amp;rdquo; в том, что к коду (в отличие от скриптов) начинают применять практики обычные для программирования, например тестирование.&lt;/p>
&lt;p>Вот что имеет смысл тестировать в IaC:&lt;/p>
&lt;ul>
&lt;li>контракты (входы и выходы) модулей&lt;/li>
&lt;li>мутации параметров ( &lt;code>&amp;quot;${env}-${name}&amp;quot;&lt;/code> или &lt;code>if env=prod then https should be enabled&lt;/code> )&lt;/li>
&lt;li>внешние ограничения (&amp;ldquo;не должно быть security group с полностью открытыми портами&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>Сами ресурсы, которые мы создаем &lt;em>внутри&lt;/em> модуля тестировать, конечно же, смысла не имеет &amp;ndash; эта часть декларативна и уже протестирована провайдером ресурса.&lt;/p></description></item><item><title>Различение между проектом и процессом</title><link>https://timurb.ru/kb/project-vs-process/</link><pubDate>Sat, 11 Dec 2021 22:24:21 +0300</pubDate><guid>https://timurb.ru/kb/project-vs-process/</guid><description>&lt;p>Из комментариев к обсуждению различия между проектом и процессом &lt;a href="https://www.facebook.com/alex.turkhanov/posts/10227176872024711">https://www.facebook.com/alex.turkhanov/posts/10227176872024711&lt;/a> :&lt;/p>
&lt;ul>
&lt;li>а) процесс не мобилизует ресурсы (проект мобилизует), он использует выделенные и зарезервированные под него;&lt;/li>
&lt;li>б) у процесса множественная причинность (у проекта токен-причинность), если мы сделаем вот такие действия над вот такими объектами, то из такой ситуации перейдем вот в такую;&lt;/li>
&lt;li>в) процесс есть инвариант , неизменная и неполная по составу и структуре &lt;em>основа&lt;/em> для действий. Например, у Росатома есть процесс сооружения АЭС, события и действия, которые должны произойти, чтобы соорудить АЭС. Каждый отдельный экземпляр процесса сооружения порождает еще и проект сооружения, в рамках программы конкретной АЭС, в которой еще есть и куча процессов (проектов) эксплуатации и вывода из эксплуатации и пр.&lt;/li>
&lt;li>Т.е., проект и процесс - это разные методы описания &lt;em>архитектуры действия&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>В этом контексте начинает новыми красками играть понятие о &lt;a href="https://platformdesigntoolkit.com/toolkit/">Платформенной стратегии&lt;/a> &amp;ndash; она также &lt;em>мобилизует&lt;/em> экосистему.&lt;/p></description></item><item><title>4 DORA Metrics</title><link>https://timurb.ru/kb/4-dora-metrics/</link><pubDate>Tue, 02 Nov 2021 22:26:12 +0300</pubDate><guid>https://timurb.ru/kb/4-dora-metrics/</guid><description>&lt;p>&lt;a href="https://www.devops-research.com/">DORA&lt;/a> в своем исследовании &lt;a href="https://cloud.google.com/devops/state-of-devops">State Of Devops&lt;/a> вывели метрики, которые показывают производительность организации:&lt;/p>
&lt;ul>
&lt;li>Lead Time&lt;/li>
&lt;li>Deployment Frequency&lt;/li>
&lt;li>MTTR&lt;/li>
&lt;li>Change Failure Rate&lt;/li>
&lt;/ul>
&lt;p>В двух словах, это важнейшие метрики из Lean, примененные к разработке софта, и они означают эффективность производственного процесса в компании.
В упомянутом отчете показывается, что у тех компаний, кто показывает наилучшие бизнес-результаты эти метрики также высоки.
Подробнее об этом говорится в вышеупомянутом отчете &lt;a href="https://cloud.google.com/devops/state-of-devops">State Of Devops&lt;/a>, а еще подробнее в книге &lt;a href="https://itrevolution.com/accelerate-book/">Accelerate&lt;/a>.&lt;/p></description></item><item><title>Operator Pattern</title><link>https://timurb.ru/kb/operator-pattern/</link><pubDate>Mon, 04 Oct 2021 12:45:57 +0300</pubDate><guid>https://timurb.ru/kb/operator-pattern/</guid><description>&lt;p>Паттерн Operator предназначен для создания инфраструктурных продуктов через декларативные описания.&lt;/p>
&lt;p>К примеру, сам [[Kubernetes]] во многом является реализацией этого паттерна для своих объектов.&lt;/p>
&lt;p>От контроллера отличается тем, что контроллер — это функциональный объект. Чаще всего Оператор строится при помощи контроллеров (по крайней мере в Kuberenetes).&lt;/p>
&lt;p>От IaC отличается тем, что оператор не только описывает инфраструктуру декларативно, но и реализует жизненный цикл создания-управления-уничтожения этой инфраструктурой.&lt;/p>
&lt;p>К примеру, Terraform описывает инфраструктуру как код, но применяет это изменение человек.&lt;/p></description></item><item><title>Kubernetes</title><link>https://timurb.ru/kb/kubernetes/</link><pubDate>Tue, 03 Aug 2021 15:05:22 +0300</pubDate><guid>https://timurb.ru/kb/kubernetes/</guid><description>&lt;p>[[Kubernetes]] &amp;ndash; это runtime для для написания распределенных инфраструктурных приложений с использованием [[Operator pattern]], плюс оркестратор контейнеров.&lt;/p>
&lt;p>Ключевые составляющие:&lt;/p>
&lt;ul>
&lt;li>Хранилище описаний объектов&lt;/li>
&lt;li>Модель нотификаций об изменениях как описаний, так и самих объектов&lt;/li>
&lt;li>Готовые простые инструменты для работы с хранилищем и событиями&lt;/li>
&lt;li>Мутноватый, но в целом неплохой stdlib для того, чтобы это было применимо к реальным вещам (запуск контейнеров, модель прав доступа и ограничений ресурсов и т.д.)&lt;/li>
&lt;li>Встроенный оркестратор контейнеров, за счет которого появляется возможность через эти механизмы достраивать самого себя&lt;/li>
&lt;/ul>
&lt;p>Иными словами, это state-machine интегрированная с оркестратором. За счет этого у него появляются свойства, которые по-отдельности отсутствуют как у оркестраторов, так и у state-machine.&lt;/p></description></item><item><title>Цитадель</title><link>https://timurb.ru/kb/citadel/</link><pubDate>Mon, 02 Aug 2021 13:09:46 +0300</pubDate><guid>https://timurb.ru/kb/citadel/</guid><description>&lt;p>Citadel — архитектурный паттерн проектирования наряду с паттернами &amp;ldquo;Монолит&amp;rdquo; и &amp;ldquo;Микросервисы&amp;rdquo;.&lt;/p>
&lt;p>Состоит в выделении некоторой функциональности из монолита в виде &amp;ldquo;Outpost&amp;rdquo; и сохранении основного условно монолитного ядра.&lt;/p>
&lt;p>Для того, чтобы принять решение оставлять ли некоторую функциональность в монолите, или же вынести ее в микросервис кажется можно применить [[6 причин делать микросервис]].&lt;/p>
&lt;p>Хороший пример для выделения в Outpost — сервис аутентификации, на который обычно бывает высокая нагрузка, или сервис-представление для какого-нибудь счетчика, который выдает пользователю количество непрочитанных сообщений.&lt;/p></description></item><item><title>6 Причин Делать Микросервис</title><link>https://timurb.ru/kb/6-reasons-for-microservices/</link><pubDate>Mon, 02 Aug 2021 13:04:26 +0300</pubDate><guid>https://timurb.ru/kb/6-reasons-for-microservices/</guid><description>&lt;p>Микросервисы имеют и плюсы и минусы, на которых мы сейчас останавливаться не будем.&lt;/p>
&lt;p>Существует 6 причин разделять компоненты на микросервисы, вместо разработки монолита:&lt;/p>
&lt;ol>
&lt;li>Разная частота изменений (сервисы, которые меняются часто имеет смысл выделить в отдельный микросервис)&lt;/li>
&lt;li>Разный жизненный цикл (например, какой-то компонент требует особого вида тестирования или к нему особые требования у регуляторов)&lt;/li>
&lt;li>Разные требования к масштабированию (например, сильно нагружены чаще всего только 1-2 сервиса из десятков)&lt;/li>
&lt;li>Изоляция сбоев (если взорвется один сервис остальные продолжат работать, но при этом критичных компонентов не так много)&lt;/li>
&lt;li>Фасад к внешним зависимостям (устойчивость к смене их API, всякие AAA, и т.д.)&lt;/li>
&lt;li>Необходимость в разном техническом стеке в разных частях системы&lt;/li>
&lt;/ol>
&lt;p>(Это вольный пересказ статьи &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>)&lt;/p></description></item><item><title>API</title><link>https://timurb.ru/kb/api/</link><pubDate>Sun, 01 Aug 2021 23:39:54 +0300</pubDate><guid>https://timurb.ru/kb/api/</guid><description>&lt;p>Предоставление API можно рассматривать как способ подключения к деятельности других субъектов, или способ подключения к другому рынку.&lt;/p>
&lt;p>Тот, кто предоставляет API к своему сервису также предоставляет и способ использования своего продукта в деятельности предпринимателей со стороны.
По видимому это одна из причин, почему многие вендоров участвуют в создании &lt;a href="https://timurb.ru/kb/open-standards/">открытых стандартов&lt;/a>.&lt;/p>
&lt;p>В этом смысле конструирование API наиболее удобных для каких-то конкретных пользователей можно рассматривать как упаковку имеющегося продукта под новые рынки.
В этом же контексте по видимому можно применять те же способы разработки продуктов, которые применяются и для продуктов физического мира (такие как Lean Startup и т.д.)&lt;/p></description></item><item><title>Открытые стандарты</title><link>https://timurb.ru/kb/open-standards/</link><pubDate>Sun, 01 Aug 2021 22:56:25 +0300</pubDate><guid>https://timurb.ru/kb/open-standards/</guid><description>&lt;p>[[Открытые стандарты]] — это способ формирования вендорами рынка, на котором они смогут строить свои решения и играть по понятным правилам.&lt;/p>
&lt;p>Через создание спецификации некоторого API вендоры оформляют и стабилизируют рынок, чтобы появилась возможность выпускать под него свои продукты.&lt;/p>
&lt;p>Помимо этого это удешевляет разработку как компонентов, так и архитектуры — не нужно специально проектировать интерфейсы.&lt;/p>
&lt;p>Примеры (возможно не все из них корректные):&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[[Open Container Initiative]]: &lt;a href="https://opencontainers.org/">https://opencontainers.org/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open Application Model: &lt;a href="https://oam.dev/">https://oam.dev/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open Service Broker API: &lt;a href="https://www.openservicebrokerapi.org/">https://www.openservicebrokerapi.org/&lt;/a>&lt;/p></description></item><item><title>Open Container Initiative</title><link>https://timurb.ru/kb/open-container-initiative/</link><pubDate>Sun, 01 Aug 2021 22:18:30 +0300</pubDate><guid>https://timurb.ru/kb/open-container-initiative/</guid><description>&lt;p>[[Open Container Initiative]] — это рабочая группа, включающая в себя крупных вендоров, которая разрабатывает [[открытые стандарты]] для запуска контейнеров.&lt;/p>
&lt;p>В стандарт входят три спецификации:&lt;/p>
&lt;ul>
&lt;li>Спецификация образов контейнеров (&lt;a href="https://github.com/opencontainers/image-spec">https://github.com/opencontainers/image-spec&lt;/a>)&lt;/li>
&lt;li>Спецификация передачи образов (&lt;a href="https://github.com/opencontainers/distribution-spec">https://github.com/opencontainers/distribution-spec&lt;/a>)&lt;/li>
&lt;li>Спецификация рантайма для контейнеров (&lt;a href="https://github.com/opencontainers/runtime-spec">https://github.com/opencontainers/runtime-spec&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>Это позволяет разным вендорам делать собственные реализации контейнеризации оставаясь при этом совместимыми с пользовательским тулчейном &amp;ndash; инструментами разработки, сборки, оркестраторами и т.д.&lt;/p>
&lt;p>Примеры реализации этих стандартов (список не исчерпывающий):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencontainers/image-spec/blob/main/implementations.md">https://github.com/opencontainers/image-spec/blob/main/implementations.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/implementations.md">https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Индикаторы и метрики Devops</title><link>https://timurb.ru/kb/system-metrics-devops/</link><pubDate>Sun, 01 Aug 2021 11:57:32 +0300</pubDate><guid>https://timurb.ru/kb/system-metrics-devops/</guid><description>&lt;p>Большая ошибка многих рассуждающих в контексте DevOps о &amp;ldquo;снижении TTM&amp;rdquo; и необходимости &amp;ldquo;релизиться чаще&amp;rdquo; состоит в том, что они рассматривают частоту релизов и время &amp;ldquo;от коммита до продакшна&amp;rdquo; как технический показатель. В лучшем случае рассматривают с учетом простоев в цепочке поставке. Они считают, что если автоматизировать все, они смогут релизиться 100 раз в день и догонят и перегонят Google (конечно, для этого автоматизировать нужно &amp;ldquo;не просто так&amp;rdquo;, а &amp;ldquo;по-умному&amp;rdquo;).&lt;/p>
&lt;p>На деле же автоматизация на этот показатель влияет достаточно мало (больше влияет отсутствие автоматизации) и в современном мире эти показатели в гораздо большей степени определяют другие сущности в организации — социотехническая архитектура приложения (зависимости между командами разработки и их автономность) и планирование продуктового инкремента. Возможно еще что-то, что я плохо вижу прямо сейчас.&lt;/p></description></item><item><title>Атрибуты Качества</title><link>https://timurb.ru/kb/quality-attributes/</link><pubDate>Thu, 29 Jul 2021 13:31:52 +0300</pubDate><guid>https://timurb.ru/kb/quality-attributes/</guid><description>&lt;p>Атрибуты качества уточняют требования к системе —- как функциональные, так и не функциональные. Они не могут обсуждаться отдельно без требований.&lt;/p>
&lt;p>Атрибуты качества должны быть максимально конкретными и точными, с минимумом возможных интерпретаций. В идеале по ним должно быть возможно построить Quality Gate.&lt;/p>
&lt;p>Атрибуты качества часто несут в себе некоторые затраты на их реализацию. Через эти затраты можно обсуждать какие из атрибутов качества важны для стейкхолдеров, а какими можно поступиться.&lt;/p>
&lt;p>Примеры атрибутов качества см. например в статье по ссылке &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Architect Elevator</title><link>https://timurb.ru/kb/architect-elevator/</link><pubDate>Tue, 27 Jul 2021 21:53:21 +0300</pubDate><guid>https://timurb.ru/kb/architect-elevator/</guid><description>&lt;p>Architect Elevator &amp;ndash; принцип, который утверждает, что Архитектура — это способ &lt;em>коммуникации&lt;/em> между уровнями в организации.&lt;/p>
&lt;p>С учетом того, что современные организации движутся в сторону Software defined processes, коммуникация эта должна затрагивать как организационные, так и технические взаимодействия.&lt;/p></description></item><item><title/><link>https://timurb.ru/about/</link><pubDate>Wed, 21 Jul 2021 19:12:34 +0300</pubDate><guid>https://timurb.ru/about/</guid><description>&lt;p>&lt;img src="./images/photo.jpg#photofloatright" alt="Timur Batyrshin">&lt;/p>
&lt;h2 id="об-авторе">Об авторе&lt;/h2>
&lt;p>Меня зовут Тимур Батыршин.
Я развиваю методологию DevOps и связанные с этим архитектурные и организационные подходы.&lt;/p>
&lt;p>Я менеджер практики Инфраструктурного консалтинга в компании &lt;a href="https://axenix.pro/">AXENIX&lt;/a> (бывшая российская ветвь Accenture),
один из основателей и член программного комитета конференций &lt;a href="https://devopsconf.io/">DevOpsConf&lt;/a>, преподаватель в &lt;a href="https://otus.ru">OTUS&lt;/a>.&lt;/p>
&lt;p>Все написанное здесь отражает мое мнение, и никак не связано с позицией работодателя.
Также я иногда размещаю чужие цитаты &amp;ndash; в этом случае стараюсь приводить ссылку на источник.&lt;/p>
&lt;p>Тексты могут и будут дорабатываться со временем, это может происходить прямо внутри статей, не отдельными страницами.&lt;/p></description></item></channel></rss>