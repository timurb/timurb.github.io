<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>микросервисы on Об DevOps и архитектуру</title><link>https://timurb.ru/tags/%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D1%8B/</link><description>Recent content in микросервисы on Об DevOps и архитектуру</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Mon, 02 Aug 2021 13:09:46 +0300</lastBuildDate><atom:link href="https://timurb.ru/tags/%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D1%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Цитадель</title><link>https://timurb.ru/kb/citadel/</link><pubDate>Mon, 02 Aug 2021 13:09:46 +0300</pubDate><guid>https://timurb.ru/kb/citadel/</guid><description>Citadel — архитектурный паттерн проектирования наряду с паттернами &amp;ldquo;Монолит&amp;rdquo; и &amp;ldquo;Микросервисы&amp;rdquo;.
Состоит в выделении некоторой функциональности из монолита в виде &amp;ldquo;Outpost&amp;rdquo; и сохранении основного условно монолитного ядра.
Для того, чтобы принять решение оставлять ли некоторую функциональность в монолите, или же вынести ее в микросервис кажется можно применить [[6 причин делать микросервис]].
Хороший пример для выделения в Outpost — сервис аутентификации, на который обычно бывает высокая нагрузка, или сервис-представление для какого-нибудь счетчика, который выдает пользователю количество непрочитанных сообщений.</description></item><item><title>6 Причин Делать Микросервис</title><link>https://timurb.ru/kb/6-reasons-for-microservices/</link><pubDate>Mon, 02 Aug 2021 13:04:26 +0300</pubDate><guid>https://timurb.ru/kb/6-reasons-for-microservices/</guid><description>Микросервисы имеют и плюсы и минусы, на которых мы сейчас останавливаться не будем.
Существует 6 причин разделять компоненты на микросервисы, вместо разработки монолита:
Разная частота изменений (сервисы, которые меняются часто имеет смысл выделить в отдельный микросервис) Разный жизненный цикл (например, какой-то компонент требует особого вида тестирования или к нему особые требования у регуляторов) Разные требования к масштабированию (например, сильно нагружены чаще всего только 1-2 сервиса из десятков) Изоляция сбоев (если взорвется один сервис остальные продолжат работать, но при этом критичных компонентов не так много) Фасад к внешним зависимостям (устойчивость к смене их API, всякие AAA, и т.</description></item></channel></rss>